package fr.tp.isima.business;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Un utilisateur est informé des consultations pour pouvoir incrementer son
 * nombre de citation
 * 
 * @author Benjamin Kuchcik
 *
 */
public class Utilisateur {

    private final String pseudonyme;
    private final Quotes quotes;

    /**
     * Ce compteur est incrementé uniquement lorsqu'une session d'utilisation se
     * termine
     */

    private final List<SessionUtilisation> sessionsUtilisations = new CopyOnWriteArrayList<SessionUtilisation>();
    private final AtomicInteger nombreTotalDeCitationEnregistree = new AtomicInteger();
    private final Utilisateurs utilisateurs;

    public Utilisateur(String pseudonyme, Quotes quotes, IncrementationEventListener incEventListener) {
        this.pseudonyme = pseudonyme;
        this.quotes = quotes;
        this.incEventListener = incEventListener;
    }

    public String getPseudonyme() {
        return pseudonyme;
    }

    public Quotes getQuotes() {
        return quotes;
    }

    /**
     * Cree une nouvelle session d'utilisation, celle-ci est liee fortement a
     * l'utilisateur
     * 
     * @return la session d'utilisation
     */
    public SessionUtilisation ouvrirSessionUtilisation() {
        final SessionUtilisation su = new SessionUtilisation(this);
        sessionsUtilisations.add(su);
        return su;
    }

    @Override
    public void incrementDone() {
        nombreTotalDeCitationEnregistree.incrementAndGet();
        incEventListener.incrementDone();
    }

    void terminerSession(SessionUtilisation sessionUtilisation) {
        sessionsUtilisations.remove(sessionUtilisation);
    }

    public int getNombreSessionUtilisation() {
        return sessionsUtilisations.size();
    }

    public int getNombreCitationVue() {
        return nombreTotalDeCitationEnregistree.get();
    }
}
